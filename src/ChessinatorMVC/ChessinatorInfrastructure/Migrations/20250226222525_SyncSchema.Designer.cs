// <auto-generated />
using System;
using ChessinatorDomain.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChessinatorInfrastructure.Migrations
{
    [DbContext(typeof(ChessdbContext))]
    [Migration("20250226222525_SyncSchema")]
    partial class SyncSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChessinatorDomain.Model.ChessMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlackPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Moves")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("WhitePlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlackPlayerId" }, "IX_ChessMatch_BlackPlayerId");

                    b.HasIndex(new[] { "TournamentId" }, "IX_ChessMatch_TournamentId");

                    b.HasIndex(new[] { "WhitePlayerId" }, "IX_ChessMatch_WhitePlayerId");

                    b.ToTable("ChessMatch", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizer", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentElo")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeakElo")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesCount")
                        .HasColumnType("int");

                    b.Property<double>("Winrate")
                        .HasColumnType("float");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TitleId" }, "IX_Player_TitleId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.PlayerTournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlayerId" }, "IX_PlayerTournament_PlayerId");

                    b.HasIndex(new[] { "TournamentId" }, "IX_PlayerTournament_TournamentId");

                    b.ToTable("PlayerTournament", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.TimeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseMinutes")
                        .HasColumnType("int");

                    b.Property<int>("IncSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeControl", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Title", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerLimit")
                        .HasColumnType("int");

                    b.Property<int>("RoundCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeControlId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizerId" }, "IX_Tournament_OrganizerId");

                    b.HasIndex(new[] { "TimeControlId" }, "IX_Tournament_TimeControlId");

                    b.HasIndex(new[] { "VenueId" }, "IX_Tournament_VenueId");

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("ChessinatorDomain.Model.ChessMatch", b =>
                {
                    b.HasOne("ChessinatorDomain.Model.Player", "BlackPlayer")
                        .WithMany("ChessMatchBlackPlayers")
                        .HasForeignKey("BlackPlayerId")
                        .IsRequired();

                    b.HasOne("ChessinatorDomain.Model.Tournament", "Tournament")
                        .WithMany("ChessMatches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("ChessinatorDomain.Model.Player", "WhitePlayer")
                        .WithMany("ChessMatchWhitePlayers")
                        .HasForeignKey("WhitePlayerId")
                        .IsRequired();

                    b.Navigation("BlackPlayer");

                    b.Navigation("Tournament");

                    b.Navigation("WhitePlayer");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Player", b =>
                {
                    b.HasOne("ChessinatorDomain.Model.Title", "Title")
                        .WithMany("Players")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.PlayerTournament", b =>
                {
                    b.HasOne("ChessinatorDomain.Model.Player", "Player")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChessinatorDomain.Model.Tournament", "Tournament")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Tournament", b =>
                {
                    b.HasOne("ChessinatorDomain.Model.Organizer", "Organizer")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChessinatorDomain.Model.TimeControl", "TimeControl")
                        .WithMany("Tournaments")
                        .HasForeignKey("TimeControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChessinatorDomain.Model.Venue", "Venue")
                        .WithMany("Tournaments")
                        .HasForeignKey("VenueId");

                    b.Navigation("Organizer");

                    b.Navigation("TimeControl");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Organizer", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Player", b =>
                {
                    b.Navigation("ChessMatchBlackPlayers");

                    b.Navigation("ChessMatchWhitePlayers");

                    b.Navigation("PlayerTournaments");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.TimeControl", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Title", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Tournament", b =>
                {
                    b.Navigation("ChessMatches");

                    b.Navigation("PlayerTournaments");
                });

            modelBuilder.Entity("ChessinatorDomain.Model.Venue", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
